window.googleMaps=window.googleMaps||{log:window._gmData?window._gmData.logging:false,_maps:{},map:function(locations,options){if(this.log){console.log(`============================================================`);console.log(`Creating a new map object`)}var map=new DynamicMap(locations,options);this._maps[map.id]=map;return map},getMap:function(mapId,assumeSuccess){if(this.log&&!assumeSuccess){console.log(`============================================================`);console.log(`[${mapId}] Getting existing map`)}var map=this._maps[mapId];if(!map){console.warn(`[GM] Unable to find map "${mapId}"`)}return map},init:function(mapId,callback){var map,dna,matchingContainers;var containers=this._whichMaps(mapId);if(!window._gmData){console.warn(`[GM] The window._gmData object has not been defined`)}for(var i in containers){map=containers[i];if(!map){console.warn(`[GM] Cannot find specified map container #${mapId}`);continue}matchingContainers=document.querySelectorAll(`#${map.id}`).length;if(!matchingContainers){console.warn(`[GM] No DOM element exists using the identifier #${map.id}`);continue}if(1<matchingContainers){console.warn(`[GM] Multiple DOM elements are using the identifier #${map.id}`);continue}if(this.log){console.log(`============================================================`);console.log(`[${map.id}] Initializing map`)}dna=map.dataset.dna;if(!dna){console.warn(`[GM] Map container #${map.id} is missing DNA`);continue}this._unpack(dna);let dynamicMap=this.getMap(map.id,true);if(window._gmData??null){const _infoWindows=window._gmData.infoWindows[map.id]||[];const _markerCallbacks=window._gmData.markerCallbacks[map.id]||[];if(Object.keys(_infoWindows).length){if(this.log){console.log(`[${map.id}] Activating all info windows`)}for(let markerId in _infoWindows){let infoWindow=_infoWindows[markerId];dynamicMap._initInfoWindow(markerId,infoWindow)}}if(Object.keys(_markerCallbacks).length){if(this.log){console.log(`[${map.id}] Activating all marker callbacks`)}for(let markerId in _markerCallbacks){let callback=_markerCallbacks[markerId];dynamicMap._initMarkerClick(markerId,callback)}}}}if(callback&&"function"===typeof callback){if(this.log){console.log(`[${map.id}] Running map callback function:\n`,callback)}callback()}},_whichMaps:function(selection){var containers=[];switch(typeof selection){case"string":containers=[document.getElementById(selection)];break;case"object":var c;for(var i in selection){c=document.getElementById(selection[i]);containers.push(c)}break;case"undefined":var allMaps=document.getElementsByClassName("gm-map");containers=Array.prototype.slice.call(allMaps);break;default:containers=[];break}return containers},_unpack:function(dna){var sequence=JSON.parse(dna);if(!sequence){console.warn("[GM] No map DNA provided.");return}var map,block;for(var i=0;i<sequence.length;i++){block=sequence[i];if(0===i&&"map"!==block.type){console.warn("[GM] Map DNA is misconfigured.");return}switch(block.type){case"map":map=new DynamicMap(block.locations,block.options);break;case"markers":map.markers(block.locations,block.options);break;case"circles":map.circles(block.locations,block.options);break;case"kml":map.kml(block.url,block.options);break;case"styles":map.styles(block.styleSet);break;case"zoom":map.zoom(block.level);break;case"center":map.center(block.coords);break;case"fit":map.fit();break;case"refresh":map.refresh();break;case"panToMarker":map.panToMarker(block.markerId);break;case"setMarkerIcon":map.setMarkerIcon(block.markerId,block.icon);break;case"hideMarker":map.hideMarker(block.markerId);break;case"showMarker":map.showMarker(block.markerId);break;case"openInfoWindow":map.openInfoWindow(block.markerId);break;case"closeInfoWindow":map.closeInfoWindow(block.markerId);break;case"hideCircle":map.hideCircle(block.circleId);break;case"showCircle":map.showCircle(block.circleId);break;case"hideKml":map.hideKml(block.kmlId);break;case"showKml":map.showKml(block.kmlId);break}}map._checkMapVisibility();if(this.log){console.log(`[${map.id}] Finished initializing map 👍`)}this._maps[map.id]=map;return map}};