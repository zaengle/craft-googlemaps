function DynamicMap(locations,options){locations=locations||[];options=options||{};this.id=null;this.div=null;this._map=null;this._markers={};this._infoWindows={};this._circles={};this._kmls={};this._cluster=false;this._d={};this._comfortableZoom=11;this.__construct=function(locations,options){options=options||{};this.id=options.id||this._generateId("map");this.div=document.getElementById(options.id);if(!this.div){this.div=document.createElement("div")}this.div.id=this.id;this.div.classList.add("gm-map");this.div.style.display="block";this._d.zoom=options.zoom||null;this._d.center=options.center||null;this._d.markerOptions=options.markerOptions||{};this._d.circleOptions=options.circleOptions||{};this._d.infoWindowOptions=options.infoWindowOptions||{};this._d.markerLink=options.markerLink||null;this._d.markerClick=options.markerClick||null;this._cluster=options.cluster||false;if(options.height){this.div.style.height=`${options.height}px`}if(options.width){this.div.style.width=`${options.width}px`}this._createMap(options.mapOptions||{});if(options.styles){this.styles(options.styles)}if(locations&&locations.length>0){this.markers(locations)}};this.markers=function(locations,options){if(!locations){return}options=options||{};options.markerOptions=options.markerOptions||this._d.markerOptions;options.infoWindowOptions=options.infoWindowOptions||this._d.infoWindowOptions;options.markerLink=options.markerLink||this._d.markerLink;options.markerClick=options.markerClick||this._d.markerClick;options.markerOptions.map=this._map;if(options.icon){options.markerOptions.icon=options.icon}if(!Array.isArray(locations)){locations=[locations]}for(var i in locations){var coords=locations[i];if(!coords.hasOwnProperty("lat")||!coords.hasOwnProperty("lng")){continue}var markerId=options.id||coords.id||this._generateId("marker");coords.id=markerId;this._createMarker(coords,options.markerOptions);if(options.infoWindowOptions.content){this._initInfoWindow(coords.id,options.infoWindowOptions)}if(true===options.markerClick){options.markerClick=false;options.markerLink=false}if(options.markerClick){this._initMarkerClick(markerId,options.markerClick)}else if(options.markerLink&&"string"===typeof options.markerLink){this._initMarkerClick(markerId,function(){window.location.href=options.markerLink})}}return this};this.circles=function(locations,options){if(!locations){return}options=options||{};options.circleOptions=options.circleOptions||this._d.circleOptions;options.circleOptions.radius=options.circleOptions.radius||5e4;options.circleOptions.map=this._map;if(!Array.isArray(locations)){locations=[locations]}for(var i in locations){var coords=locations[i];if(!coords.hasOwnProperty("lat")||!coords.hasOwnProperty("lng")){continue}var circleId=options.id||coords.id||this._generateId("circle");coords.id=circleId;this._createCircle(coords,options.circleOptions)}return this};this.kml=function(url,options){options=options||{};options.url=options.url||url;options.map=this._map;this._createKml(url,options);return this};this.styles=function(styleSet){styleSet=styleSet||{};if(googleMaps.log){console.log(`[${this.id}] Styling map`)}this._map.setOptions({styles:styleSet});return this};this.zoom=function(level,assumeSuccess){level=level||this._d.zoom;this._d.zoom=level;if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Zooming map to level`,level)}var mapObject=this;mapObject._map.setZoom(level);google.maps.event.addListenerOnce(this._map,"bounds_changed",function(){mapObject._map.setZoom(level)});return this};this.center=function(coords,assumeSuccess){coords=coords||this._determineBounds().getCenter()||this._d.center;if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Centering map on coordinates`,coords)}if(!coords){console.warn(`[GM] Unable to center map, invalid coordinates:`,coords);return this}coords.lat=coords.lat?parseFloat(coords.lat):0;coords.lng=coords.lng?parseFloat(coords.lng):0;this._d.center=coords;var mapObject=this;mapObject._map.setCenter(coords);google.maps.event.addListenerOnce(mapObject._map,"bounds_changed",function(){mapObject._map.setCenter(coords)});return this};this.fit=function(assumeSuccess){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Fitting map to existing boundaries`)}this._map.fitBounds(this._determineBounds());const totalMarkers=Object.keys(this._markers).length;const totalCircles=Object.keys(this._circles).length;if(!totalMarkers&&!totalCircles){const zeroZero={lat:0,lng:0};console.error(`[GM] No items on the map, it will be centered in the middle of the ocean! üêô`,zeroZero);this.zoom(2,true)}return this};this.refresh=function(){if(googleMaps.log){console.log(`[${this.id}] Refreshing map`)}google.maps.event.trigger(this._map,"resize");return this};this.panToMarker=function(markerId){var marker=this.getMarker(markerId);if(googleMaps.log){console.log(`[${this.id}] Panning to marker "${markerId}"`)}if(!marker){console.warn(`[GM] Unable to pan to marker "${markerId}"`);return this}var mapObject=this;mapObject._map.panTo(marker.position);google.maps.event.addListenerOnce(mapObject._map,"bounds_changed",function(){mapObject._map.panTo(marker.position)});return this};this.setMarkerIcon=function(markerId,icon,assumeSuccess){if(Array.isArray(markerId)){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Setting icon for multiple markers`)}for(var i in markerId){this.setMarkerIcon(markerId[i],icon)}return this}if("*"===markerId){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Setting icon for all markers:`,icon)}for(var key in this._markers){this.setMarkerIcon(key,icon,true)}return this}if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Setting icon for marker "${markerId}":`,icon)}var marker=this.getMarker(markerId,true);if(!marker){console.warn(`[GM] Unable to set icon of marker "${markerId}"`);return this}marker.setIcon(icon);return this};this.hideMarker=function(markerId,assumeSuccess){if(Array.isArray(markerId)){if(googleMaps.log){console.log(`[${this.id}] Hiding multiple markers`)}for(var i in markerId){this.hideMarker(markerId[i])}return this}if("*"===markerId){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Hiding all markers`)}for(var key in this._markers){this.hideMarker(key,true)}return this}if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Hiding marker "${markerId}"`)}var marker=this.getMarker(markerId);if(!marker){console.warn(`[GM] Unable to hide marker "${markerId}"`);return this}if(this._cluster){this._cluster.removeMarker(marker)}else{marker.setMap(null)}return this};this.showMarker=function(markerId,assumeSuccess){if(Array.isArray(markerId)){if(googleMaps.log){console.log(`[${this.id}] Showing multiple markers`)}for(var i in markerId){this.showMarker(markerId[i])}return this}if("*"===markerId){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Showing all markers`)}for(var key in this._markers){this.showMarker(key,true)}return this}if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Showing marker "${markerId}"`)}var marker=this.getMarker(markerId);if(!marker){console.warn(`[GM] Unable to show marker "${markerId}"`);return this}if(this._cluster){this._cluster.addMarker(marker)}else{marker.setMap(this._map)}return this};this.openInfoWindow=function(markerId,assumeSuccess){if(Array.isArray(markerId)){if(googleMaps.log){console.log(`[${this.id}] Opening multiple info windows`)}for(var i in markerId){this.openInfoWindow(markerId[i])}return this}if("*"===markerId){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Opening all info windows`)}for(var key in this._infoWindows){this.openInfoWindow(key,true)}return this}if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Opening info window "${markerId}"`)}var marker=this.getMarker(markerId,true);var infoWindow=this.getInfoWindow(markerId,true);if(!marker){console.warn(`[GM] Unable to find marker "${markerId}"`);return this}if(!infoWindow){console.warn(`[GM] Unable to open info window "${markerId}"`);return this}infoWindow.open({map:this._map,anchor:marker});return this};this.closeInfoWindow=function(markerId,assumeSuccess){if(Array.isArray(markerId)){if(googleMaps.log){console.log(`[${this.id}] Closing multiple info windows`)}for(var i in markerId){this.closeInfoWindow(markerId[i])}return this}if("*"===markerId){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Closing all info windows`)}for(var key in this._infoWindows){this.closeInfoWindow(key,true)}return this}if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Closing info window "${markerId}"`)}var infoWindow=this.getInfoWindow(markerId,true);if(!infoWindow){console.warn(`[GM] Unable to close info window "${markerId}"`);return this}infoWindow.close();return this};this.hideCircle=function(circleId,assumeSuccess){if(Array.isArray(circleId)){if(googleMaps.log){console.log(`[${this.id}] Hiding multiple circles`)}for(var i in circleId){this.hideCircle(circleId[i])}return this}if("*"===circleId){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Hiding all circles`)}for(var key in this._circles){this.hideCircle(key,true)}return this}if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Hiding circle "${circleId}"`)}var circle=this.getCircle(circleId,true);if(!circle){console.warn(`[GM] Unable to hide circle "${circleId}"`);return this}circle.setMap(null);return this};this.showCircle=function(circleId,assumeSuccess){if(Array.isArray(circleId)){if(googleMaps.log){console.log(`[${this.id}] Showing multiple circles`)}for(var i in circleId){this.showCircle(circleId[i])}return this}if("*"===circleId){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Showing all circles`)}for(var key in this._circles){this.showCircle(key,true)}return this}if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Showing circle "${circleId}"`)}var circle=this.getCircle(circleId,true);if(!circle){console.warn(`[GM] Unable to show circle "${circleId}"`);return this}circle.setMap(this._map);return this};this.hideKml=function(kmlId,assumeSuccess){if(Array.isArray(kmlId)){if(googleMaps.log){console.log(`[${this.id}] Hiding multiple KML layers`)}for(var i in kmlId){this.hideKml(kmlId[i])}return this}if("*"===kmlId){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Hiding all KML layers`)}for(var key in this._kmls){this.hideKml(key,true)}return this}if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Hiding KML layer "${kmlId}"`)}var kml=this.getKml(kmlId,true);if(!kml){console.warn(`[GM] Unable to hide KML layer "${kmlId}"`);return this}kml.setMap(null);return this};this.showKml=function(kmlId,assumeSuccess){if(Array.isArray(kmlId)){if(googleMaps.log){console.log(`[${this.id}] Showing multiple KML layers`)}for(var i in kmlId){this.showKml(kmlId[i])}return this}if("*"===kmlId){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Showing all KML layers`)}for(var key in this._kmls){this.showKml(key,true)}return this}if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Showing KML layer "${kmlId}"`)}var kml=this.getKml(kmlId,true);if(!kml){console.warn(`[GM] Unable to show KML layer "${kmlId}"`);return this}kml.setMap(this._map);return this};this.getMarker=function(markerId,assumeSuccess){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Getting existing marker "${markerId}"`)}var marker=this._markers[markerId];if(!marker){console.warn(`[GM] Unable to find marker "${markerId}"`)}return marker};this.getInfoWindow=function(markerId,assumeSuccess){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Getting existing info window "${markerId}"`)}var infoWindow=this._infoWindows[markerId];if(!infoWindow){console.warn(`[GM] Unable to find info window "${markerId}"`)}return infoWindow};this.getCircle=function(circleId,assumeSuccess){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Getting existing circle "${circleId}"`)}var circle=this._circles[circleId];if(!circle){console.warn(`[GM] Unable to find circle "${circleId}"`)}return circle};this.getKml=function(kmlId,assumeSuccess){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Getting existing KML layer "${kmlId}"`)}var kml=this._kmls[kmlId];if(!kml){console.warn(`[GM] Unable to find KML layer "${kmlId}"`)}return kml};this.getMarkerClusterer=function(){if(googleMaps.log){console.log(`[${this.id}] Getting the marker clustering object`)}return this._cluster};this.getZoom=function(assumeSuccess){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Getting the current zoom level of the map`)}return this._map.getZoom()};this.getCenter=function(assumeSuccess){if(googleMaps.log&&!assumeSuccess){console.log(`[${this.id}] Getting the current center point of the map`)}return this._map.getCenter()};this.getBounds=function(){if(googleMaps.log){console.log(`[${this.id}] Getting the current bounds of the map`)}return this._map.getBounds()};this.tag=function(options){if(googleMaps.log){console.log(`[${this.id}] Rendering map`)}options=options||{};var parentId=options.parentId||null;if(!parentId||"string"!==typeof parentId){this._checkMapVisibility();if(googleMaps.log){console.log(`[${this.id}] Finished initializing map as a detached element üëç`)}return this.div}var parent=document.getElementById(parentId);if(parent){parent.appendChild(this.div)}else{console.warn(`[GM] Unable to find target container #${parentId}`)}this._checkMapVisibility();if(googleMaps.log){console.log(`[${this.id}] Finished initializing map in container "${parentId}" üëç`)}return this.div};this._createMap=function(mapOptions){if(googleMaps.log){console.log(`[${this.id}] Creating map`)}this._map=new google.maps.Map(this.div,mapOptions);this._clusterMarkers()};this._createMarker=function(coords,markerOptions){if(googleMaps.log){console.log(`[${this.id}] Adding marker "${coords.id}"`)}markerOptions.position=coords;this._markers[coords.id]=new google.maps.Marker(markerOptions);if(this._cluster){this._cluster.addMarker(this._markers[coords.id])}};this._createCircle=function(coords,circleOptions){if(googleMaps.log){console.log(`[${this.id}] Adding circle "${coords.id}"`)}circleOptions.center=coords;this._circles[coords.id]=new google.maps.Circle(circleOptions)};this._createKml=function(url,options){var kmlId=options.id||this._generateId("kml");if(googleMaps.log){console.log(`[${this.id}] Adding KML layer "${kmlId}"`)}this._kmls[kmlId]=new google.maps.KmlLayer(options)};this._initInfoWindow=function(markerId,infoWindowOptions){if(googleMaps.log){console.log(`[${this.id}] Adding info window to marker "${markerId}"`)}var marker=this.getMarker(markerId,true);if(!marker){return}this._infoWindows[markerId]=new google.maps.InfoWindow(infoWindowOptions);var map=this;google.maps.event.addListener(marker,"click",function(){map.closeInfoWindow("*",true);map.openInfoWindow(markerId)})};this._initMarkerClick=function(markerId,callback){if(googleMaps.log){console.log(`[${this.id}] Adding click event callback to marker "${markerId}":`,callback)}var marker=this.getMarker(markerId,true);if(!marker){return}if(true===callback){return}if("function"!==typeof callback){console.warn("[GM] Invalid callback function:",callback);return}google.maps.event.addListener(marker,"click",callback)};this._determineBounds=function(){var bounds=new google.maps.LatLngBounds;var key,marker,circle,cluster;for(key in this._markers){marker=this._markers[key];if(null===marker.map){continue}bounds.extend(marker.getPosition())}for(key in this._circles){circle=this._circles[key];if(null===circle.map){continue}bounds.extend(circle.getCenter())}if(this._cluster){for(key in this._cluster.clusters){cluster=this._cluster.clusters[key];bounds.union(cluster.bounds)}}return bounds};this._clusterMarkers=function(){const clusterDefault=true===this._cluster;let _cluster=window._gmData?window._gmData.cluster:[];const twigOptions=_cluster[this.id]||null;if(clusterDefault&&twigOptions){this._cluster=twigOptions}const clusterCustom="object"===typeof this._cluster;if(!clusterDefault&&!clusterCustom){return}const options={map:this._map,markers:[]};if(clusterCustom){if(this._cluster.algorithm||null){options.algorithm=this._cluster.algorithm}if(this._cluster.renderer||null){options.renderer=this._cluster.renderer}if(this._cluster.onClusterClick||null){options.onClusterClick=this._cluster.onClusterClick}}const onClusterClick=options.onClusterClick||markerClusterer.defaultOnClusterClickHandler;const parent=this;options.onClusterClick=function(event,cluster,map){if(googleMaps.log){console.log(`[${parent.id}] Opening cluster of ${cluster.markers.length} markers`)}setTimeout(()=>{parent.closeInfoWindow("*",true)},100);onClusterClick(event,cluster,map)};this._cluster=new markerClusterer.MarkerClusterer(options)};this._checkMapVisibility=function(){this._checkHeight();this._preventGreyBox()};this._checkHeight=function(){if(!googleMaps.log){return}var height=this.div.clientHeight;if(0<height){return}var url="https://plugins.doublesecretagency.com/google-maps/guides/setting-map-height/";console.warn(`[GM] The map is not visible because its parent container is zero pixels tall. More info: ${url}`)};this._preventGreyBox=function(){let zoom=this.getZoom(true);let center=this.getCenter(true);zoom=zoom||this._d.zoom;center=center||this._d.center;if(center){let lat=center.lat();let lng=center.lng();center={lat:isNaN(lat)?0:lat,lng:isNaN(lng)?0:lng};this.center(center);if(!zoom){zoom=this._comfortableZoom}}else{this.fit();const totalMarkers=Object.keys(this._markers).length;const totalCircles=Object.keys(this._circles).length;const total=totalMarkers+totalCircles;if(1===total&&!zoom){zoom=this._comfortableZoom}}if(zoom){this.zoom(zoom)}};this._generateId=function(prefix){var randomId="";var alpha="abcdefghijklmnopqrstuvwxyz";var alphabet=alpha.split("");for(char=0;char<6;char++){var i=Math.floor(Math.random()*25);randomId+=alphabet[i]}return prefix?`${prefix}-${randomId}`:randomId};this.__construct(locations,options)}